; ModuleID = 'Compiler for Decaf language'
source_filename = "Compiler for Decaf language"

@arr = global [100 x i32] zeroinitializer
@a = global i32 0
@b = global i32 0
@c = global i32 0
@0 = private unnamed_addr constant [31 x i8] c"n = %d and i = %d and tmp = %d\00"

define i32 @temp(i32 %aa) {
entry:
  %aaa = alloca i32
  %aa1 = alloca i32
  store i32 %aa, i32* %aa1
  store i32 0, i32* %aaa
  %0 = load i32, i32* %aa1
  ret i32 %0
  ret i32 1
}

define i32 @main() {
entry:
  %tmp = alloca i1
  %i = alloca i32
  %n = alloca i32
  store i32 0, i32* %n
  store i32 0, i32* %i
  store i1 false, i1* %tmp
  %0 = load i32, i32* %i
  store i32 0, i32* %i
  %1 = load i32, i32* %i
  %subtmp = sub i32 %1, 2
  %2 = load i32, i32* %n
  store i32 %subtmp, i32* %n
  %3 = load i32, i32* %n
  %plusEqualtmp = add i32 %3, 5
  store i32 %plusEqualtmp, i32* %n
  %4 = load i32, i32* %n
  %gtcomparetmp = icmp sgt i32 %4, 0
  %5 = load i1, i1* %tmp
  store i1 %gtcomparetmp, i1* %tmp
  %6 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @0, i32 0, i32 0), i32* %n, i32* %i, i1* %tmp)
  ret i32 0
  ret i32 1
}

declare i32 @printf(i8*, i32*, i32*, i1*)
