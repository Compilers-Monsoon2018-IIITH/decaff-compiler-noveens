; ModuleID = 'Noveen's compiler for decaf'
source_filename = "Noveen's compiler for decaf"

@arr = global [100 x i32] zeroinitializer
@a = global i32 0
@b = global i32 0
@c = global i32 0
@0 = private unnamed_addr constant [22 x i8] c"n = %d and tmp = %d; \00"
@1 = private unnamed_addr constant [29 x i8] c"temp(2) = %d, temp(1) = %d; \00"
@2 = private unnamed_addr constant [11 x i8] c"max = %d; \00"
@3 = private unnamed_addr constant [11 x i8] c"max = %d; \00"
@4 = private unnamed_addr constant [7 x i8] c"true; \00"
@5 = private unnamed_addr constant [8 x i8] c"false; \00"
@6 = private unnamed_addr constant [9 x i8] c"i = %d; \00"

define i32 @temp(i32 %aa, i32 %bb) {
entry:
  %bb2 = alloca i32
  %aa1 = alloca i32
  store i32 %aa, i32* %aa1
  store i32 %bb, i32* %bb2
  %0 = load i32, i32* %aa1
  %modtmp = srem i32 %0, 2
  %equalcomparetmp = icmp eq i32 %modtmp, 0
  br i1 %equalcomparetmp, label %if, label %else

if:                                               ; preds = %entry
  %1 = load i32, i32* @b
  store i32 2, i32* @b
  ret i32 0

else:                                             ; preds = %entry
  %2 = load i32, i32* @b
  store i32 2, i32* @b
  ret i32 1

ifcont:                                           ; No predecessors!
  ret i32 0
  ret i32 -1
}

define i32 @main() {
entry:
  %aa = alloca i32
  %i5 = alloca i32
  %az = alloca i32
  %i = alloca i32
  %tmp = alloca i1
  %mx = alloca i32
  %n = alloca i32
  %a = alloca i32
  store i32 0, i32* %a
  store i32 0, i32* %n
  store i32 0, i32* %mx
  store i1 false, i1* %tmp
  %0 = load i32, i32* %n
  %addEqualToTmp = add i32 %0, 5
  store i32 %addEqualToTmp, i32* %n
  %1 = load i32, i32* %n
  %gtcomparetmp = icmp sgt i32 %1, 0
  %2 = load i1, i1* %tmp
  store i1 %gtcomparetmp, i1* %tmp
  %3 = load i32, i32* %n
  %4 = load i1, i1* %tmp
  %5 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @0, i32 0, i32 0), i32 %3, i1 %4)
  %6 = call i32 @temp(i32 2, i32 0)
  %7 = call i32 @temp(i32 1, i32 0)
  %8 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*, i32, i32)*)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1, i32 0, i32 0), i32 %6, i32 %7)
  %9 = call i32 @temp(i32 1, i32 2)
  %10 = load i32, i32* %mx
  store i32 1, i32* %mx
  %11 = load i32, i32* %mx
  %12 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i32 0, i32 0), i32 %11)
  store i32 0, i32* %i
  br label %beforeloop

beforeloop:                                       ; preds = %ifcont, %entry
  %i1 = phi i32 [ 0, %entry ], [ %NextVal, %ifcont ]
  %13 = load i32, i32* %i
  %ltcomparetmp = icmp slt i32 %13, 2
  br i1 %ltcomparetmp, label %loop, label %afterloop

loop:                                             ; preds = %beforeloop
  br i1 true, label %if, label %ifcont

afterloop:                                        ; preds = %beforeloop
  %14 = call i32 @temp(i32 3, i32 0)
  %gtcomparetmp2 = icmp sgt i32 %14, 2
  br i1 %gtcomparetmp2, label %if3, label %else

if:                                               ; preds = %loop
  store i32 0, i32* %az
  %15 = load i32, i32* %mx
  store i32 2, i32* %mx
  %16 = load i32, i32* %mx
  %17 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i32 %16)
  br label %ifcont

ifcont:                                           ; preds = %if, %loop
  %NextVal = add i32 %i1, 1
  store i32 %NextVal, i32* %i
  br label %beforeloop

if3:                                              ; preds = %afterloop
  %18 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i32 0, i32 0))
  br label %ifcont4

else:                                             ; preds = %afterloop
  %19 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i32 0, i32 0))
  br label %ifcont4

ifcont4:                                          ; preds = %else, %if3
  %20 = call i32 @temp(i32 2, i32 0)
  store i32 %20, i32* %i5
  br label %beforeloop6

beforeloop6:                                      ; preds = %loop7, %ifcont4
  %i9 = phi i32 [ %20, %ifcont4 ], [ %NextVal11, %loop7 ]
  %21 = load i32, i32* %i5
  %ltcomparetmp10 = icmp slt i32 %21, 5
  br i1 %ltcomparetmp10, label %loop7, label %afterloop8

loop7:                                            ; preds = %beforeloop6
  store i32 0, i32* %aa
  %22 = load i32, i32* %i5
  %23 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i32 0, i32 0), i32 %22)
  %NextVal11 = add i32 %i9, 1
  store i32 %NextVal11, i32* %i5
  br label %beforeloop6

afterloop8:                                       ; preds = %beforeloop6
  ret i32 0
}

declare i32 @printf(i8*, i32, i1)
