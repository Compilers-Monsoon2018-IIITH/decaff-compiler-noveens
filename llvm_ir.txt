; ModuleID = 'Compiler for decaf'
source_filename = "Compiler for decaf"

@arr = global [100 x i32] zeroinitializer
@a = global i32 0
@b = global i32 0
@c = global i32 0
@0 = private unnamed_addr constant [22 x i8] c"n = %d and tmp = %d; \00"
@1 = private unnamed_addr constant [29 x i8] c"temp(2) = %d, temp(1) = %d; \00"

define i32 @temp(i32 %aa) {
entry:
  %aa1 = alloca i32
  store i32 %aa, i32* %aa1
  %0 = load i32, i32* %aa1
  %modtmp = srem i32 %0, 2
  %equalcomparetmp = icmp eq i32 %modtmp, 0
  br i1 %equalcomparetmp, label %if, label %else

if:                                               ; preds = %entry
  ret i32 0

else:                                             ; preds = %entry
  ret i32 1

ifcont:                                           ; No predecessors!
  ret i32 0
}

define i32 @main() {
entry:
  %tmp = alloca i1
  %n = alloca i32
  %a = alloca i32
  store i32 0, i32* %a
  store i32 0, i32* %n
  store i1 false, i1* %tmp
  %0 = load i32, i32* %n
  %addEqualToTmp = add i32 %0, 5
  store i32 %addEqualToTmp, i32* %n
  %1 = load i32, i32* %n
  %gtcomparetmp = icmp sgt i32 %1, 0
  %2 = load i1, i1* %tmp
  store i1 %gtcomparetmp, i1* %tmp
  %3 = load i32, i32* %n
  %4 = load i1, i1* %tmp
  %5 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @0, i32 0, i32 0), i32 %3, i1 %4)
  %6 = call i32 @temp(i32 2)
  %7 = call i32 @temp(i32 1)
  %8 = call i32 bitcast (i32 (i8*, i32, i1)* @printf to i32 (i8*, i32, i32)*)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1, i32 0, i32 0), i32 %6, i32 %7)
  ret i32 0
}

declare i32 @printf(i8*, i32, i1)
